
Installing
----------

A Core install consists of three parts: a bootloader on some media, the main image 
(kernel and *core.gz*) on some media, and the *tce* directory on some media.

While these can all be on the same disk, they need not be; all three can be on separate 
media if needed.

[TIP]
=========
A Core install is completely nomadic, it doesn't read any settings from the install system.

This means you can install to a drive on one system, and then move the drive to the target 
system without any issues. This is useful for example for laptops that can't boot from CD or 
USB.
=========

With the official installer
~~~~~~~~~~~~~~~~~~~~~~~~~~~

The official installer is included in the Core Plus edition, but can also be downloaded 
separately to install from a TinyCore or a command-line Core image (*tc-install.tcz*).

The command-line version, *tc-install.sh*, is not covered here, but it follows the same 
prompts as the graphical version.

The GUI installer is a five-step process.

Step 1: Source and destination
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

image::images/part1/installer_pg1.png[scaledwidth="100%"]

In the first step, we need to select the install media, install type, and the target.
The installer may be able to detect the install media automatically as in this image; if 
not, click on the "Path to core.gz" text field to browse for the install media.

The three install types are frugal, USB-HDD, and USB-ZIP. Frugal is the default type, it may 
be installed to a partition, and usually works for bootable USB sticks too. USB-HDD uses the 
whole disk and slightly different formatting, which may help the USB stick boot on 
computers it otherwise wouldn't. USB-ZIP is for older BIOSes that needed ZIP-drive emulation 
in order to boot from USB.

If this is the only Linux system on the computer, select "Install boot loader" and "Mark 
partition active" (the latter only if not using the whole disk).

Step 2: File system type
^^^^^^^^^^^^^^^^^^^^^^^^

image::images/part1/installer_pg2.png[scaledwidth="100%"]

Here we select the formatting, defaulting to ext4.

Step 3: Boot codes
^^^^^^^^^^^^^^^^^^

image::images/part1/installer_pg3.png[scaledwidth="100%"]

If you want to enter any boot codes, this is the place. By default you don't need any.

NOTE: You can change these later by editing the bootloader config file.

Step 4: Optional parts
^^^^^^^^^^^^^^^^^^^^^^

image::images/part1/installer_pg4.png[scaledwidth="100%"]

This page is only visible when installing from the Core Plus image. You can choose to 
install some useful extensions here. They can be installed afterwards too, this choice is 
not special or irreversible.

Step 5: Good to go?
^^^^^^^^^^^^^^^^^^^

image::images/part1/installer_pg5.png[scaledwidth="100%"]

In the final step, the installer lets us review the choices before starting. If everything's 
in order, click Proceed.

image::images/part1/installer_done.png[scaledwidth="100%"]

The installer will happily chug away, and assuming nothing out of place happens, you'll see 
a success screen like this one.

From Windows via core2usb
~~~~~~~~~~~~~~~~~~~~~~~~~

Core Team member bmarkus created a simple USB installer for Windows users. It's not 
recommended to 
use third-party installers such as LiLi or Unetbootin, as they won't create the third part 
of the install (the *tce* directory), meaning more work for you.

This utility is available from http://core2usb.sf.net/. If you don't want to burn a CD, it's 
a convenient one-click way to install Core to USB.

image::images/part1/core2usb.jpg[scaledwidth="100%"]

Manually
~~~~~~~~

A manual install can be done from any Linux distro. For advanced users it's often faster 
than burning a CD or otherwise installing via the installer.

As the exact steps vary a lot depending on your program and host distro choices, we'll only 
cover the general parts here.

Step 1: Partitioning & formatting
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Create a normal partition on the target disk using your favorite program: for GUI we 
recommend *Gparted*, for command line *cfdisk*; both should be available in all major 
distros.

The partition should be formatted with a Linux file system. We recommend *ext4*.

If the target is a regular hard disk, it's recommended to also create and format a swap 
partition.

[NOTE]
=============
Using more exotic file systems like XFS needs either a remaster or some other way to load 
the XFS support, in order to access the XFS partition.
=============

Step 2: Files
^^^^^^^^^^^^^

The latest Core files are available separately for your convenience - no need to unpack them 
from the ISO file. Download *core.gz* and *vmlinuz* from your closest mirror, from the 
directory *release/distribution_files*. The link for the main mirror is 
http://repo.tinycorelinux.net/4.x/x86/release/distribution_files/.

The usual location for the kernel and initrd is under /boot on the target partition, but you 
can place them anywhere.

To hold your extensions, create a root directory called *tce* on the target partition.

Step 3: Bootloader
^^^^^^^^^^^^^^^^^^

Finally, you need to install a bootloader to the target disk's MBR, and point it to the 
kernel and initrd.

NOTE: For UEFI installs, please consult your bootloader's documentation.

The syslinux family, grub 0.x, and grub 2 have been tested to work fine.

For a normal boot, no boot codes need to be added - the location of the *tce* directory will 
be autodetected. If you anticipate having multiple *tce* directories, then it's recommended 
to specify which one you want as a boot code.

For USB sticks, and other removable/slow media such as SD cards, you might need to add the 
*waitusb* bootcode. It tells Core to wait the given number of seconds to give slow devices 
time to register, and optionally polls for a given partition label or UUID to proceed as 
soon as the device shows up.

The syntax is *waitusb=5* to wait five seconds, or *waitusb=20:LABEL=mydisk* to wait up to 
twenty seconds for the partition labeled "mydisk" to show up.

Finally, you might want to limit the kernel's boot output by adding the *quiet* bootcode.

A typical grub 0.97 config file might look like this:

[source,sh]
----
default 0
timeout 10

title Core
root (hd0,0)
kernel /boot/vmlinuz quiet waitusb=5
initrd /boot/core.gz
----
