
A Web kiosk
-----------

*By Luiz Fernando Estevarengo AKA Zendrael*

A kiosk machine is essentially a terminal to access the web, any website, 
just one website, or perhaps a webapp. It does not run any kid of app
other than the web browser.

With Core, we can build a simple kiosk with little effort, a bunch of extensions 
and the creation of an add-on to our browser of choice. 

Selecting extensions
~~~~~~~~~~~~~~~~~~~~

Starting with an installed TinyCore, you will need:
- firefox.tcz (our browser)
- idesk.tcz (for the screen icons)
- liberation-fonts-ttf.tcz (because many sites use them)
- openbox.tcz (deals better with our add-on later)

Load all these extensions OnBoot.

If you want to let the user do more on the web, you can also use alsa.tcz, 
getflash.tcz, and your choice of Firefox add-ons.

For a better looking experience, you may want to have a gtk2 theme 
engine loaded with a theme of your choice. This will not be covered as it 
depends on your preferences.

Configuring Core extensions
~~~~~~~~~~~~~~~~~~~~~~~~~~~

iDesk icons
What happens if our user, for some reason, closes the browser or it crashes? 
We must have an easy way to restart the browser, preferably with a visual clue, 
like an icon in the desktop. iDesk let us do it with icons that can not be changed, 
deleted or moved on the deskop, only if you could change the configs. Let's do the trick! 

Inside your home directory create one file, the .ideskrc which cointain the idesk 
configuration; and one directory, where will be stored your icons, .idesktop:

$ touch .ideskrc
$ mkdir .idesktop

Edit the .ideskrc to reflect the colors of your desktop and some grid options:
$ editor .ideskrc

The content should be:

table Config
    FontName: sans
    FontSize: 10
    FontColor: #ffffff
    Locked: false
    Transparency: 50
    Shadow: true
    ShadowColor: #000000
    ShadowX: 1
    ShadowY: 2
    Bold: false
    ClickDelay: 100
    IconSnap: true
    SnapWidth: 55
    SnapHeight: 100
    SnapOrigin: BottomRight
    SnapShadow: true
    SnapShadowTrans: 200
    CaptionOnHover: false
end
table Actions
    Lock: control right doubleClk
    Reload: middle doubleClk
    Drag: false
    EndDrag: left singleClk
    Execute[0]: left doubleClk
    Execute[1]: right doubleClk
end

Now, inside the .idesktop directory we will create the file that contains the information 
of our icon to restart the browser if it crashes or the user close it by some way:

$ cd .idesktop
$ touch kiosk.lnk

Edit the file with 

$ editor kiosk.lnk

With this content:
table Icon
    Caption: Kiosk
    Icon: .idesktop/kiosk.png
    X: 100
    Y: 100
    Command[0]: firefox
end

Note that the icon mentioned in the file is inside the .idesktop folder.
You can use any icon you want, whereever it is. Save the file.

iDesk autoload
As the iDesk will serve to show an icon for our browser (if the user, for some reason closes it),
it need to be loaded right after the boot. So, in the ~/.X.d/ directory we sill create a file
named idesk with a single command inside it:

$ cd ~/.X.d/
$ touch idesk
$ echo "idesk &" > idesk

Done with iDesk now.
Firefox profile
We will do a custom profile to handle the kiosk. Open up a terminal and type:

$ cd ~/.mozilla/firefox
$ ls 

You will find some directory like j08765.default and a file name profiles.ini.
Here is where your actual profile, settings and extensions are stored and the file where 
firefox looks for it as default, repectively.
So, we will start to change the profile name and set it to the ini file:

$ mv j08756.default kiosk.default
$ editor profiles.ini

Then change the Path in profiles.ini to kisk.default as follows:

[General]
StartWithLastProfile=1

[Profile0]
Name=kiosk
IsRelative=1
Path=kiosk.default

Save it. Start then close Firefox.
Firefox autoload
We will need to have the Firefox loaded as soon as our kiosk runs. Here we follow the same
autoload way that we used for idesk:

$ cd ~/.X.d/
$ touch firefox
$ echo "firefox &" > firefox

Next, we will do some coding with XUL and Javascript.

Configuring Firefox
Install some add-ons
To take the best of our kiosk, we will setup it to use less space on the screen and
avoid some troubles with ads. Open up Firefox, right click the menu bar and uncheck
"Menu Bar" item. Then, go to the Firefox menu and access the Add-ons manager.
The add-ons we will use are:
Movable Firefox Button
Adblock Plus

Install both searching for them in the search box then restart as required.
The last step, our own add-on will do the last trick!

Creating our add-on 
Firefox add-ons are easy to build and can be used without the need to upload them to
the Mozilla website. We will create a folder and file structure of our add-on to create
a clock button that will also control the behavior of Firefox on the screen every time it loads.

Folder and file structure
Open up a terminal and lets start by creating the files and folders

$ cd ~/.mozilla/firefox/kiosk.default/extensions
$ mkdir -p clock$kiosk.com/chrome
$ cd clock@kiosk.com
$ touch install.rdf chrome.manifest
$ cd chrome
$ touch clock.xul clock.js clock.css 

The resulting file structure will be something like this
clock@kiosk.com/
	chrome.manifest
	install.rdf
	chrome/
		clock.css
		clock.js
		clock.xul

The manifest and the rdf files will set up our add-on to be viewed and loaded by Firefox. 
The chrome directory (which doesn't have anything to do with Google Chrome or 
Chromium browser) will hold the add-on files. Edit each of them with its contents:

chrome.manifest
content clock chrome/
#in the same line:
style chrome://global/content/customizeToolbar.xul chrome://clock/content/clock.css

#in the same line:
overlay chrome://browser/content/browser.xul chrome://clock/content/clock.xul

install.rdf
<?xml version="1.0"?>

<RDF xmlns="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
 	xmlns:em="http://www.mozilla.org/2004/em-rdf#">

  <Description
	about="urn:mozilla:install-manifest"

	em:name="clock"
	em:description="Clock for Kiosk"
	em:creator="Zendrael"

	em:id="clock@kiosk.com"
	em:version="1.0"
	em:homepageURL="http://www.zendrael.com/kiosk"

	em:iconURL="chrome://clock/content/icon.png" >

	<em:targetApplication><!-- Firefox -->
  	<Description
    	em:id="{ec8030f7-c20a-464f-9b0e-13a3a9e97384}"
    	em:minVersion="5.0"
    	em:maxVersion="99" />
	</em:targetApplication>

	<em:file>
  	<Description
    	about="urn:mozilla:extension:clock"
    	em:package="content/clock/" />
	</em:file>

  </Description>

</RDF>

chrome/clock.css
/* let the buttons be smaller as its icons */
.clean {
    padding: 0px;
    margin: 0px;
}

/* remove arrow from buttons */
.clean .toolbarbutton-menu-dropmarker{
    display: none !important;
}

#osStatus-button-clock {
    padding-top: 5px;
    margin-right: 3px;
}

#appmenu-toolbar-button .toolbarbutton-menu-dropmarker{
    display: none !important;
}

toolbar:not([mode="text"]) #appmenu-toolbar-button > .toolbarbutton-icon,
toolbar:not([mode="text"]) #appmenu-button > .button-box .button-icon {
    list-style-image: url("moz-icon://stock/system-run?size=16") !important;
}

toolbar[mode="icons"] #appmenu-toolbar-button > .toolbarbutton-text,
toolbar[mode="icons"] #appmenu-button > .button-box .button-text {
    display: none;
}

chrome/clock.js
//start main window without borders
document.getElementById("main-window").setAttribute("hidechrome","true");

/*
    function clock
   	 calculate the time and date to show
*/
function getClock(){
    var obj = document.getElementById("osStatus-button-clock");

    var now = new Date();
    var hours = now.getHours();
    var minutes = now.getMinutes();
    var seconds = now.getSeconds();
    var timeValue = ""+ hours;

    timeValue += ((minutes<10) ? ":0" : ":") + minutes;
    //timeValue += ((seconds<10) ? ":0" : ":") + seconds;

    //set date
    var month = now.getMonth() + 1;
    var day = now.getDate();
    var year = now.getFullYear();
    var dateValue = day + "/" + month + "/" + year;

    obj.setAttribute("value", timeValue);
    obj.setAttribute("tooltiptext", dateValue);
}

//set timeout events, updating clock
setInterval( "getClock()", 1000 );

chrome/clock.xul
<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/css" href="chrome://clock/content/clock.css"?>

<!DOCTYPE overlay >
<overlay id="custombutton-overlay" xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

<script type="application/javascript" src="chrome://clock/content/clock.js"/>

<!-- Firefox -->
<toolbarpalette id="BrowserToolbarPalette">
    <toolbaritem id="osStatusItens" label="OS Status Itens">
   	 <label id="osStatus-button-clock"/>
    </toolbaritem>
</toolbarpalette>

<!-- button details -->
<!--<toolbarbutton id="osStatus-button-clock"-->
<label id="osStatus-button-clock"
  value="00:00"
  tooltiptext="00/00/0000"
  class="toolbarbutton-1 chromeclass-toolbar-additional clean"
  crop="none" orient="horizontal" dir="reverse"
  />
 
</overlay>

Now, restart you Firefox. It may ask if you want to install our clock extension.
After restart again, nothing will change, we need to right-click the toolbar and go
to Customize. In the window that opened we will find our clock add-on;
grab it then drag to the right side of the "+" button in the same bar that tabs appear. 
Done on the drag itens window. Restart Firefox.
Results
Reboot the system and you will get the Firefox taking all the desktop without the titlebar
and with the clock working. Our kiosk is now ready!
	
	
