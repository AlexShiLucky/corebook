
A Web kiosk
-----------

*By Luiz Fernando Estevarengo AKA Zendrael*

A kiosk machine is essentially a terminal to access the web: any website,
just one website, or perhaps a web app. It does not run any kind of app
other than the web browser.

With Core, we can build a simple kiosk with little effort, a bunch of extensions 
and the creation of an add-on to our browser of choice. 

Selecting extensions
~~~~~~~~~~~~~~~~~~~~

Starting with an installed TinyCore, you will need:

- *firefox.tcz* (our browser)
- *idesk.tcz* (for the screen icons)
- *liberation-fonts-ttf.tcz* (many sites are designed for Microsoft fonts)
- *openbox.tcz* (deals better with our add-on later)

Load all these extensions OnBoot.

If you want to let the user do more on the web, you can also use *alsa.tcz*,
*getflash.tcz*, and your choice of Firefox add-ons.

For a better looking experience, you may want to have a gtk2 theme 
engine loaded with a theme of your choice. This will not be covered as it 
depends on your preferences.

Configuring Core extensions
~~~~~~~~~~~~~~~~~~~~~~~~~~~

iDesk icons
^^^^^^^^^^^

What happens if our user, for some reason, closes the browser or it crashes? 
We must have an easy way to restart the browser, preferably with a visual clue, 
like an icon in the desktop. iDesk lets us do this with icons that can not be changed,
deleted or moved on the desktop.

[NOTE]
============
You may also choose to use the included *wbar*; or to not have icons at all, but to run
Firefox in a loop (so that when the previous instance closes, a new one is started).
============

Inside your home directory create one file, *.ideskrc* which will contain the iDesk
configuration; and one directory, where your icons will be kept, *.idesktop*:

[source,sh]
----
$ touch .ideskrc
$ mkdir .idesktop
$ editor .ideskrc
----

Edit the .ideskrc to reflect the colors of your desktop and some grid options:

[source,sh]
----
table Config
    FontName: sans
    FontSize: 10
    FontColor: #ffffff
    Locked: false
    Transparency: 50
    Shadow: true
    ShadowColor: #000000
    ShadowX: 1
    ShadowY: 2
    Bold: false
    ClickDelay: 100
    IconSnap: true
    SnapWidth: 55
    SnapHeight: 100
    SnapOrigin: BottomRight
    SnapShadow: true
    SnapShadowTrans: 200
    CaptionOnHover: false
end
table Actions
    Lock: control right doubleClk
    Reload: middle doubleClk
    Drag: false
    EndDrag: left singleClk
    Execute[0]: left doubleClk
    Execute[1]: right doubleClk
end
----

Now, inside the *.idesktop* directory we will create the file that contains the information 
of our icon, to restart the browser should it crash or should the user close it:

[source,sh]
----
$ cd .idesktop
$ touch kiosk.lnk
$ editor kiosk.lnk
----

With this content:

[source,sh]
----
table Icon
    Caption: Web
    Icon: .idesktop/web.png
    X: 100
    Y: 100
    Command[0]: firefox
end
----

Note that the icon mentioned in the file is inside the .idesktop folder.
You can use any icon you want; to use the Firefox icon, you can copy it from 
*/usr/local/share/pixmaps*.

iDesk autoload
^^^^^^^^^^^^^^

As iDesk will serve to show an icon for our browser, we need to start it in a suitable 
place.
So, in the *~/.X.d/* directory we will create a file to start it up:

[source,sh]
----
$ mkdir -p ~/.X.d
$ cd ~/.X.d/
$ echo "idesk &" > idesk
----

Firefox profile
^^^^^^^^^^^^^^^

We will create a custom profile to handle the kiosk. Open and close Firefox at least once so 
that the default profile gets created.

Open up a terminal and type:

[source,sh]
----
$ cd ~/.mozilla/firefox
$ ls
---- 

You will find a directory like *j08765.default* and a file named *profiles.ini*.
We will change the profile name to a more convenient one, and set it in the ini file:

[source,sh]
----
$ mv *.default kiosk.default
$ editor profiles.ini
----

Then change the Path in profiles.ini to kiosk.default as follows:

[source,sh]
----
[General]
StartWithLastProfile=1

[Profile0]
Name=kiosk
IsRelative=1
Path=kiosk.default
----

Start and close Firefox to see that the moved profile is working.

Firefox autoload
^^^^^^^^^^^^^^^^

We will need to have Firefox loaded as soon as our kiosk runs X. Here we follow the same
way that we used for idesk:

[source,sh]
----
$ cd ~/.X.d
$ echo "firefox &" > firefox
----

Next, we will do some coding with XUL and Javascript.

Configuring Firefox
^^^^^^^^^^^^^^^^^^^

To make the best of our kiosk, we will setup it to use less space on the screen and
avoid some troubles with ads. Open up Firefox, right click the menu bar and uncheck the
*Menu Bar* item. Then, go to the Firefox menu and access the *Add-ons manager*.

The add-ons we will use are:

- Movable Firefox Button
- Ad-block Plus

Install both by searching for them in the search box, and then restart as required.

Creating our add-on
~~~~~~~~~~~~~~~~~~~

Firefox add-ons are easy to build and can be used without the need to upload them to
the Mozilla website. We will create an add-on to create
a clock button, and to control the behavior of Firefox on the screen every time 
it loads.

Folder and file structure
^^^^^^^^^^^^^^^^^^^^^^^^^

Start by creating the files and folders:

[source,sh]
----
$ cd ~/.mozilla/firefox/kiosk.default/extensions
$ mkdir -p clock@kiosk.com/chrome
$ cd clock@kiosk.com
$ touch install.rdf chrome.manifest
$ cd chrome
$ touch clock.xul clock.js clock.css 
----

The resulting file structure will look like this:

[source,sh]
----
clock@kiosk.com/
	chrome.manifest
	install.rdf
	chrome/
		clock.css
		clock.js
		clock.xul
----

The manifest and the rdf files will set up our add-on to be viewed and loaded by Firefox. 
The chrome directory (which doesn't have anything to do with Google Chrome or 
Chromium browser) will hold the add-on files. Edit each of them with its contents:

*chrome.manifest*
[source,sh]
----
content clock chrome/

# long line
style chrome://global/content/customizeToolbar.xul \
chrome://clock/content/clock.css
# another long line
overlay chrome://browser/content/browser.xul \
chrome://clock/content/clock.xul
----

Please note the line continuations - this is not a shell script, so the long lines will need 
to be intact. Remove the *\* line continuation sign, and put the following line on the same 
line.

*install.rdf*
[source,xml]
----
<?xml version="1.0"?>

<RDF
  xmlns="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
  xmlns:em="http://www.mozilla.org/2004/em-rdf#">

  <Description
	about="urn:mozilla:install-manifest"

	em:name="clock"
	em:description="Clock for Kiosk"
	em:creator="Zendrael"

	em:id="clock@kiosk.com"
	em:version="1.0"
	em:homepageURL="http://www.zendrael.com/kiosk"

	em:iconURL="chrome://clock/content/icon.png">

	<em:targetApplication><!-- Firefox -->
  	<Description
    	em:id="{ec8030f7-c20a-464f-9b0e-13a3a9e97384}"
    	em:minVersion="5.0"
    	em:maxVersion="99" />
	</em:targetApplication>

	<em:file>
  	<Description
    	about="urn:mozilla:extension:clock"
    	em:package="content/clock/" />
	</em:file>

  </Description>
</RDF>
----

*chrome/clock.css*
[source,css]
----
/* let the buttons be smaller */
.clean {
    padding: 0px;
    margin: 0px;
}

/* remove arrow from buttons */
.clean .toolbarbutton-menu-dropmarker {
    display: none !important;
}

#osStatus-button-clock {
    padding-top: 5px;
    margin-right: 3px;
}

#appmenu-toolbar-button
  .toolbarbutton-menu-dropmarker {
    display: none !important;
}

toolbar:not([mode="text"]) #appmenu-toolbar-button
  > .toolbarbutton-icon,
toolbar:not([mode="text"]) #appmenu-button
  > .button-box .button-icon {
    list-style-image:
      url("moz-icon://stock/system-run?size=16")
      !important;
}

toolbar[mode="icons"] #appmenu-toolbar-button
  > .toolbarbutton-text,
toolbar[mode="icons"] #appmenu-button
  > .button-box .button-text {
    display: none;
}
----

*chrome/clock.js*
[source,js]
----
//start main window without borders
document.getElementById("main-window").\
  setAttribute("hidechrome","true");

/*
    function clock
   	 show the time and date
*/
function getClock(){
    var obj =
      document.getElementById("osStatus-button-clock");

    var now = new Date();
    var hours = now.getHours();
    var minutes = now.getMinutes();
    var seconds = now.getSeconds();
    var timeValue = ""+ hours;

    timeValue +=
      ((minutes<10) ? ":0" : ":") + minutes;

    //set date
    var month = now.getMonth() + 1;
    var day = now.getDate();
    var year = now.getFullYear();
    var dateValue = day + "/" + month + "/" + year;

    obj.setAttribute("value", timeValue);
    obj.setAttribute("tooltiptext", dateValue);
}

//set timeout events, updating clock
setInterval( "getClock()", 1000 );
----

*chrome/clock.xul*
[source,xml]
----
<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/css"
  href="chrome://clock/content/clock.css"?>

<!DOCTYPE overlay >
<overlay id="custombutton-overlay"
  xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

<script type="application/javascript"
  src="chrome://clock/content/clock.js"/>

<!-- Firefox -->
<toolbarpalette id="BrowserToolbarPalette">
  <toolbaritem id="osStatusItems" label="OS Status Items">
    <label id="osStatus-button-clock"/>
  </toolbaritem>
</toolbarpalette>

<!-- button details -->
<label id="osStatus-button-clock"
  value="00:00"
  tooltiptext="00/00/0000"
  class="toolbarbutton-1 chromeclass-toolbar-additional clean"
  crop="none" orient="horizontal" dir="reverse"
  />
 
</overlay>
----

Now, start Firefox. It may ask if you want to install our clock extension: we do.

After a restart, nothing will change; we need to right-click the toolbar and go
to Customize. In the window that opened we will find our clock add-on.
Drag to the right side of the "+" button in the same bar that tabs appear. 

Restart and close Firefox once more.

Shutdown considerations
~~~~~~~~~~~~~~~~~~~~~~~

It's desirable to be able to turn off our system by the power switch, making the kiosk more 
reliable in the event of power loss.

To do this, enable *copy2fs* via the *Toggle copy2fs* option in *Apps*. Now all extensions 
are loaded to RAM.

As the final step, we will unmount the disk after the boot has completed. This will prevent 
any corruption from getting to the disk, enabling clean shutdowns via the power switch.

Add the following to */opt/bootlocal.sh*, replacing *sda1* with your drive:
[source,sh]
----
umount /mnt/sda1
----

Results
~~~~~~~

Reboot the system and you will get Firefox taking all the desktop without the title bar
and with the clock working. Our kiosk is now ready!
	
	
